module Termlot
  module Canvas
    class Ascii < Base

      X_PIXEL_PER_CHAR = 3
      Y_PIXEL_PER_CHAR = 3

      # A pixel-intensity representation of all printable ASCII characters.
      INTENSITIES = {
        '!' => [0.245, 0.441, 0.216, 0.333, 1.0, 0.265, 0.284, 0.676, 0.245].freeze,
        '"' => [0.689, 1.0, 0.639, 0.623, 0.885, 0.574, 0.311, 0.295, 0.311].freeze,
        '#' => [0.242, 0.336, 0.309, 0.779, 1.0, 0.732, 0.55, 0.591, 0.349].freeze,
        '$' => [0.411, 0.58, 0.286, 0.786, 1.0, 0.625, 0.509, 0.973, 0.67].freeze,
        '%' => [0.405, 0.317, 0.302, 0.841, 1.0, 0.698, 0.476, 0.595, 0.643].freeze,
        '&' => [0.301, 0.39, 0.191, 0.838, 1.0, 0.529, 0.603, 0.676, 0.588].freeze,
        "'" => [0.464, 1.0, 0.411, 0.446, 0.946, 0.393, 0.357, 0.321, 0.357].freeze,
        '(' => [0.287, 0.67, 0.362, 0.819, 0.904, 0.223, 0.596, 1.0, 0.351].freeze,
        ')' => [0.411, 0.653, 0.263, 0.242, 0.968, 0.705, 0.379, 1.0, 0.505].freeze,
        '*' => [0.319, 0.522, 0.292, 0.566, 1.0, 0.504, 0.195, 0.212, 0.195].freeze,
        '+' => [0.19, 0.219, 0.181, 0.514, 1.0, 0.457, 0.343, 0.657, 0.314].freeze,
        ',' => [0.198, 0.198, 0.198, 0.198, 0.267, 0.218, 0.317, 1.0, 0.376].freeze,
        '-' => [0.385, 0.365, 0.385, 0.596, 1.0, 0.538, 0.481, 0.654, 0.442].freeze,
        '.' => [0.299, 0.284, 0.299, 0.328, 0.478, 0.313, 0.433, 1.0, 0.388].freeze,
        '/' => [0.186, 0.412, 0.526, 0.278, 1.0, 0.546, 0.825, 0.856, 0.186].freeze,
        '0' => [0.342, 0.475, 0.317, 1.0, 0.95, 0.942, 0.6, 0.683, 0.558].freeze,
        '1' => [0.256, 0.421, 0.207, 0.364, 1.0, 0.364, 0.331, 0.81, 0.463].freeze,
        '2' => [0.369, 0.524, 0.379, 0.524, 1.0, 0.699, 0.699, 0.854, 0.485].freeze,
        '3' => [0.327, 0.5, 0.327, 0.382, 1.0, 0.873, 0.455, 0.727, 0.618].freeze,
        '4' => [0.168, 0.376, 0.32, 0.608, 1.0, 0.808, 0.352, 0.544, 0.568].freeze,
        '5' => [0.374, 0.523, 0.318, 0.654, 1.0, 0.682, 0.458, 0.738, 0.645].freeze,
        '6' => [0.266, 0.45, 0.303, 1.0, 1.0, 0.798, 0.679, 0.734, 0.633].freeze,
        '7' => [0.376, 0.523, 0.495, 0.385, 1.0, 0.624, 0.339, 0.624, 0.183].freeze,
        '8' => [0.35, 0.45, 0.325, 0.925, 1.0, 0.85, 0.633, 0.708, 0.6].freeze,
        '9' => [0.393, 0.473, 0.339, 0.866, 1.0, 1.0, 0.464, 0.732, 0.482].freeze,
        ':' => [0.28, 0.373, 0.28, 0.413, 1.0, 0.36, 0.387, 0.907, 0.347].freeze,
        ';' => [0.208, 0.277, 0.208, 0.297, 0.733, 0.267, 0.416, 1.0, 0.287].freeze,
        '<' => [0.218, 0.241, 0.276, 0.736, 1.0, 0.69, 0.471, 0.667, 0.552].freeze,
        '=' => [0.241, 0.241, 0.241, 0.823, 1.0, 0.772, 0.658, 0.785, 0.62].freeze,
        '>' => [0.276, 0.241, 0.218, 0.713, 1.0, 0.713, 0.563, 0.655, 0.46].freeze,
        '?' => [0.344, 0.563, 0.396, 0.385, 1.0, 0.583, 0.344, 0.677, 0.219].freeze,
        '@' => [0.269, 0.4, 0.331, 0.908, 0.938, 0.985, 0.908, 1.0, 0.838].freeze,
        'A' => [0.231, 0.436, 0.214, 0.769, 1.0, 0.718, 0.692, 0.453, 0.701].freeze,
        'B' => [0.4, 0.415, 0.274, 1.0, 0.889, 0.741, 0.674, 0.607, 0.526].freeze,
        'C' => [0.319, 0.46, 0.345, 1.0, 0.602, 0.354, 0.602, 0.646, 0.442].freeze,
        'D' => [0.427, 0.427, 0.282, 1.0, 0.645, 0.879, 0.718, 0.605, 0.508].freeze,
        'E' => [0.41, 0.47, 0.333, 1.0, 0.915, 0.444, 0.675, 0.692, 0.462].freeze,
        'F' => [0.414, 0.483, 0.345, 1.0, 0.871, 0.422, 0.629, 0.362, 0.181].freeze,
        'G' => [0.319, 0.46, 0.327, 1.0, 0.637, 0.637, 0.602, 0.69, 0.743].freeze,
        'H' => [0.348, 0.205, 0.348, 1.0, 0.614, 0.97, 0.614, 0.318, 0.606].freeze,
        'I' => [0.309, 0.504, 0.285, 0.382, 1.0, 0.309, 0.398, 0.797, 0.35].freeze,
        'J' => [0.283, 0.509, 0.443, 0.283, 0.726, 1.0, 0.472, 0.717, 0.566].freeze,
        'K' => [0.348, 0.288, 0.318, 1.0, 0.917, 0.47, 0.614, 0.477, 0.523].freeze,
        'L' => [0.394, 0.257, 0.174, 1.0, 0.505, 0.202, 0.725, 0.706, 0.477].freeze,
        'M' => [0.386, 0.339, 0.37, 1.0, 0.85, 0.945, 0.606, 0.299, 0.598].freeze,
        'N' => [0.42, 0.275, 0.328, 1.0, 0.817, 0.916, 0.557, 0.473, 0.702].freeze,
        'O' => [0.356, 0.449, 0.339, 1.0, 0.602, 0.975, 0.636, 0.627, 0.602].freeze,
        'P' => [0.4, 0.44, 0.344, 1.0, 0.816, 0.712, 0.64, 0.352, 0.192].freeze,
        'Q' => [0.347, 0.458, 0.331, 1.0, 0.568, 0.966, 0.771, 0.924, 0.881].freeze,
        'R' => [0.406, 0.398, 0.286, 1.0, 0.872, 0.684, 0.617, 0.474, 0.481].freeze,
        'S' => [0.439, 0.541, 0.327, 0.816, 1.0, 0.673, 0.51, 0.806, 0.714].freeze,
        'T' => [0.395, 0.521, 0.37, 0.42, 1.0, 0.353, 0.227, 0.597, 0.193].freeze,
        'U' => [0.39, 0.229, 0.39, 1.0, 0.475, 0.983, 0.653, 0.661, 0.61].freeze,
        'V' => [0.475, 0.228, 0.465, 1.0, 0.842, 0.941, 0.446, 0.931, 0.386].freeze,
        'W' => [0.363, 0.185, 0.363, 1.0, 0.758, 0.952, 0.71, 0.637, 0.653].freeze,
        'X' => [0.333, 0.288, 0.318, 0.621, 1.0, 0.545, 0.53, 0.492, 0.508].freeze,
        'Y' => [0.445, 0.264, 0.436, 0.718, 1.0, 0.636, 0.255, 0.691, 0.218].freeze,
        'Z' => [0.358, 0.532, 0.468, 0.541, 1.0, 0.569, 0.743, 0.771, 0.45].freeze,
        '[' => [0.43, 0.68, 0.31, 0.75, 0.86, 0.2, 0.76, 1.0, 0.27].freeze,
        '\\' => [0.591, 0.387, 0.204, 0.645, 1.0, 0.258, 0.215, 0.968, 0.753].freeze,
        ']' => [0.318, 0.654, 0.355, 0.206, 0.888, 0.598, 0.271, 1.0, 0.607].freeze,
        '^' => [0.378, 0.671, 0.341, 0.829, 1.0, 0.756, 0.293, 0.232, 0.293].freeze,
        '_' => [0.417, 0.417, 0.417, 0.396, 0.396, 0.396, 0.958, 1.0, 0.938].freeze,
        '`' => [0.542, 1.0, 0.479, 0.458, 0.646, 0.458, 0.417, 0.396, 0.417].freeze,
        'a' => [0.209, 0.264, 0.209, 0.636, 1.0, 0.864, 0.691, 0.836, 0.745].freeze,
        'b' => [0.554, 0.315, 0.169, 1.0, 0.738, 0.715, 0.638, 0.623, 0.546].freeze,
        'c' => [0.232, 0.326, 0.284, 1.0, 0.821, 0.495, 0.768, 0.779, 0.516].freeze,
        'd' => [0.187, 0.358, 0.561, 0.805, 0.797, 1.0, 0.618, 0.667, 0.626].freeze,
        'e' => [0.202, 0.266, 0.22, 0.972, 1.0, 0.771, 0.734, 0.789, 0.505].freeze,
        'f' => [0.296, 0.6, 0.464, 0.624, 1.0, 0.4, 0.352, 0.488, 0.144].freeze,
        'g' => [0.181, 0.244, 0.197, 0.764, 0.701, 0.772, 0.803, 1.0, 0.906].freeze,
        'h' => [0.57, 0.32, 0.172, 1.0, 0.734, 0.68, 0.594, 0.375, 0.586].freeze,
        'i' => [0.391, 0.491, 0.182, 0.618, 1.0, 0.236, 0.255, 0.755, 0.473].freeze,
        'j' => [0.248, 0.574, 0.376, 0.307, 1.0, 0.782, 0.396, 1.0, 0.772].freeze,
        'k' => [0.545, 0.258, 0.189, 1.0, 0.826, 0.417, 0.621, 0.561, 0.455].freeze,
        'l' => [0.491, 0.563, 0.179, 0.473, 1.0, 0.232, 0.259, 0.741, 0.464].freeze,
        'm' => [0.259, 0.277, 0.232, 1.0, 0.929, 0.911, 0.696, 0.375, 0.688].freeze,
        'n' => [0.265, 0.304, 0.225, 1.0, 0.873, 0.853, 0.765, 0.471, 0.735].freeze,
        'o' => [0.235, 0.306, 0.224, 1.0, 0.878, 0.949, 0.776, 0.806, 0.724].freeze,
        'p' => [0.205, 0.235, 0.167, 0.788, 0.682, 0.697, 1.0, 0.705, 0.545].freeze,
        'q' => [0.185, 0.25, 0.202, 0.79, 0.726, 0.782, 0.621, 0.774, 1.0].freeze,
        'r' => [0.28, 0.378, 0.329, 1.0, 1.0, 0.488, 0.817, 0.549, 0.22].freeze,
        's' => [0.24, 0.288, 0.221, 0.74, 1.0, 0.558, 0.548, 0.856, 0.625].freeze,
        't' => [0.325, 0.417, 0.225, 0.65, 1.0, 0.375, 0.3, 0.692, 0.417].freeze,
        'u' => [0.258, 0.227, 0.258, 1.0, 0.66, 0.969, 0.742, 0.876, 0.814].freeze,
        'v' => [0.287, 0.213, 0.287, 0.947, 0.862, 0.862, 0.511, 1.0, 0.426].freeze,
        'w' => [0.236, 0.17, 0.236, 1.0, 0.84, 0.934, 0.811, 0.811, 0.745].freeze,
        'x' => [0.232, 0.205, 0.232, 0.652, 1.0, 0.58, 0.58, 0.679, 0.571].freeze,
        'y' => [0.208, 0.162, 0.2, 0.623, 0.654, 0.631, 0.546, 1.0, 0.369].freeze,
        'z' => [0.232, 0.286, 0.241, 0.509, 1.0, 0.518, 0.643, 0.821, 0.402].freeze,
        '{' => [0.234, 0.577, 0.369, 0.559, 0.937, 0.234, 0.45, 1.0, 0.342].freeze,
        '|' => [0.238, 0.514, 0.21, 0.314, 0.99, 0.248, 0.314, 1.0, 0.248].freeze,
        '}' => [0.402, 0.554, 0.214, 0.259, 0.964, 0.473, 0.384, 1.0, 0.375].freeze,
        '~' => [0.365, 0.346, 0.365, 0.885, 1.0, 0.846, 0.654, 0.769, 0.692].freeze,
      }.freeze

      # Find the best character to represent every 3x3 cell, by maximizing the
      # dot product of its representation with the intensities.
      CHARS = (1..0b111111111).map do |n|
        repr = ([0] * 9 + n.digits(2).reverse)[-9..-1]
        vec = repr.map { |v| v == 1 ? 1 : -1 } # Make zeros contribute to the selection too.
        best = INTENSITIES.max_by do |chr, int|
          int.zip(vec).map { |a, b| a * b }.sum
        end.first
        [repr, best]
      end.to_h.merge({ [0] * 9 => " " }).freeze

      def initialize(width, height)
        super(width, height, X_PIXEL_PER_CHAR, Y_PIXEL_PER_CHAR)
      end

      def render(hits)
        char = CHARS[hits.flatten(1).map{ |a| a.empty? ? 0 : 1 }]
        color = hits.flatten(2).sort_by { |t| t.first || 0 }.last&.last # The latest color.
        [char, color]
      end

    end
  end
end
