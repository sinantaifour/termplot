module Termplot
  module Canvas
    class Ascii < Base

      X_PIXEL_PER_CHAR = 3
      Y_PIXEL_PER_CHAR = 3

      # A pixel-intensity representation of all printable ASCII characters.
      # See tools/intensities.rb to find out how it was generated.
      INTENSITIES = {
        "!" => [0.25, 1.0, 0.34, 0.25, 0.95, 0.32, 0.24, 0.66, 0.29].freeze,
        "\"" => [0.61, 1.0, 0.73, 0.26, 0.32, 0.28, 0.21, 0.2, 0.21].freeze,
        "#" => [0.47, 0.75, 0.75, 0.81, 1.0, 0.88, 0.49, 0.51, 0.37].freeze,
        "$" => [0.68, 1.0, 0.5, 0.66, 0.9, 0.85, 0.47, 0.95, 0.76].freeze,
        "%" => [0.85, 0.71, 0.6, 0.63, 1.0, 0.89, 0.44, 0.45, 0.67].freeze,
        "&" => [0.6, 0.84, 0.4, 0.88, 1.0, 0.79, 0.55, 0.6, 0.65].freeze,
        "'" => [0.27, 1.0, 0.35, 0.22, 0.35, 0.23, 0.21, 0.2, 0.21].freeze,
        "(" => [0.38, 0.94, 0.43, 0.77, 0.83, 0.15, 0.42, 1.0, 0.42].freeze,
        ")" => [0.38, 1.0, 0.5, 0.15, 0.71, 0.96, 0.35, 1.0, 0.55].freeze,
        "*" => [0.49, 1.0, 0.59, 0.45, 0.82, 0.54, 0.16, 0.15, 0.16].freeze,
        "+" => [0.17, 0.33, 0.18, 0.46, 1.0, 0.55, 0.22, 0.46, 0.26].freeze,
        "," => [0.17, 0.16, 0.17, 0.17, 0.37, 0.26, 0.25, 1.0, 0.48].freeze,
        "-" => [0.3, 0.3, 0.3, 0.48, 1.0, 0.57, 0.33, 0.45, 0.36].freeze,
        "." => [0.26, 0.24, 0.26, 0.29, 0.55, 0.33, 0.34, 1.0, 0.43].freeze,
        "/" => [0.15, 0.57, 0.9, 0.27, 1.0, 0.44, 0.77, 0.81, 0.16].freeze,
        "0" => [0.65, 0.75, 0.73, 0.94, 0.71, 1.0, 0.44, 0.59, 0.49].freeze,
        "1" => [0.39, 0.98, 0.4, 0.25, 1.0, 0.53, 0.34, 0.81, 0.61].freeze,
        "2" => [0.54, 0.92, 0.97, 0.51, 1.0, 0.76, 0.75, 0.9, 0.6].freeze,
        "3" => [0.38, 0.8, 0.74, 0.25, 0.68, 1.0, 0.41, 0.59, 0.56].freeze,
        "4" => [0.23, 0.73, 0.76, 0.71, 0.88, 1.0, 0.26, 0.38, 0.58].freeze,
        "5" => [0.64, 1.0, 0.56, 0.49, 0.83, 0.97, 0.44, 0.68, 0.67].freeze,
        "6" => [0.51, 0.78, 0.48, 1.0, 0.78, 0.86, 0.47, 0.6, 0.57].freeze,
        "7" => [0.45, 0.81, 1.0, 0.23, 0.88, 0.45, 0.28, 0.56, 0.16].freeze,
        "8" => [0.68, 0.81, 0.77, 0.9, 0.87, 1.0, 0.53, 0.6, 0.59].freeze,
        "9" => [0.68, 0.68, 0.71, 0.59, 0.73, 1.0, 0.32, 0.54, 0.36].freeze,
        ":" => [0.27, 0.63, 0.32, 0.32, 1.0, 0.4, 0.31, 0.88, 0.38].freeze,
        ";" => [0.2, 0.45, 0.23, 0.22, 0.69, 0.29, 0.33, 1.0, 0.34].freeze,
        "<" => [0.21, 0.3, 0.39, 0.73, 1.0, 0.73, 0.28, 0.42, 0.48].freeze,
        "=" => [0.32, 0.36, 0.34, 0.81, 1.0, 0.91, 0.41, 0.47, 0.44].freeze,
        ">" => [0.36, 0.34, 0.23, 0.62, 1.0, 0.9, 0.44, 0.45, 0.32].freeze,
        "?" => [0.43, 1.0, 0.95, 0.28, 0.91, 0.55, 0.31, 0.71, 0.23].freeze,
        "@" => [0.53, 0.68, 0.78, 0.92, 0.84, 1.0, 0.67, 0.84, 0.72].freeze,
        "A" => [0.36, 0.97, 0.48, 0.87, 0.9, 1.0, 0.61, 0.3, 0.61].freeze,
        "B" => [0.83, 0.75, 0.68, 1.0, 0.76, 0.92, 0.62, 0.56, 0.54].freeze,
        "C" => [0.63, 0.69, 0.53, 1.0, 0.45, 0.24, 0.44, 0.62, 0.51].freeze,
        "D" => [0.87, 0.7, 0.71, 0.99, 0.45, 1.0, 0.65, 0.61, 0.48].freeze,
        "E" => [0.83, 0.89, 0.58, 1.0, 0.92, 0.47, 0.62, 0.72, 0.57].freeze,
        "F" => [0.84, 0.9, 0.6, 1.0, 0.85, 0.4, 0.58, 0.35, 0.16].freeze,
        "G" => [0.63, 0.69, 0.52, 1.0, 0.47, 0.7, 0.43, 0.63, 0.74].freeze,
        "H" => [0.74, 0.29, 0.74, 0.97, 0.54, 1.0, 0.52, 0.2, 0.51].freeze,
        "I" => [0.4, 1.0, 0.5, 0.25, 0.98, 0.34, 0.38, 0.79, 0.46].freeze,
        "J" => [0.26, 0.64, 0.92, 0.22, 0.42, 1.0, 0.43, 0.63, 0.52].freeze,
        "K" => [0.76, 0.62, 0.59, 1.0, 0.96, 0.53, 0.53, 0.32, 0.57].freeze,
        "L" => [0.81, 0.46, 0.15, 1.0, 0.62, 0.23, 0.64, 0.75, 0.59].freeze,
        "M" => [0.83, 0.71, 0.91, 0.96, 0.75, 1.0, 0.54, 0.17, 0.52].freeze,
        "N" => [0.83, 0.52, 0.64, 0.84, 0.7, 1.0, 0.46, 0.28, 0.63].freeze,
        "O" => [0.72, 0.66, 0.78, 1.0, 0.37, 0.99, 0.49, 0.6, 0.55].freeze,
        "P" => [0.81, 0.75, 0.84, 1.0, 0.74, 0.67, 0.56, 0.29, 0.13].freeze,
        "Q" => [0.71, 0.65, 0.77, 1.0, 0.37, 0.98, 0.51, 0.89, 0.86].freeze,
        "R" => [0.83, 0.71, 0.71, 1.0, 0.8, 0.8, 0.55, 0.32, 0.52].freeze,
        "S" => [0.87, 1.0, 0.56, 0.62, 0.91, 0.97, 0.5, 0.75, 0.78].freeze,
        "T" => [0.52, 1.0, 0.62, 0.21, 0.92, 0.3, 0.18, 0.55, 0.22].freeze,
        "U" => [0.81, 0.26, 0.8, 0.99, 0.41, 1.0, 0.51, 0.61, 0.58].freeze,
        "V" => [1.0, 0.32, 0.95, 0.85, 0.99, 0.95, 0.31, 0.86, 0.39].freeze,
        "W" => [0.73, 0.26, 0.69, 0.96, 0.84, 1.0, 0.58, 0.45, 0.62].freeze,
        "X" => [0.56, 0.63, 0.62, 0.51, 1.0, 0.62, 0.51, 0.32, 0.53].freeze,
        "Y" => [0.76, 0.46, 0.76, 0.4, 1.0, 0.49, 0.16, 0.52, 0.21].freeze,
        "Z" => [0.46, 0.92, 1.0, 0.53, 0.95, 0.45, 0.74, 0.77, 0.56].freeze,
        "[" => [0.54, 0.97, 0.34, 0.58, 0.79, 0.13, 0.58, 1.0, 0.3].freeze,
        "\\" => [0.76, 0.69, 0.15, 0.32, 1.0, 0.36, 0.15, 0.67, 0.91].freeze,
        "]" => [0.31, 1.0, 0.77, 0.14, 0.74, 0.83, 0.28, 1.0, 0.84].freeze,
        "^" => [0.52, 1.0, 0.63, 0.5, 0.4, 0.53, 0.16, 0.16, 0.16].freeze,
        "_" => [0.32, 0.32, 0.32, 0.29, 0.29, 0.29, 0.97, 1.0, 1.0].freeze,
        "`" => [0.4, 1.0, 0.47, 0.32, 0.34, 0.34, 0.37, 0.32, 0.32].freeze,
        "a" => [0.23, 0.42, 0.34, 0.61, 0.85, 1.0, 0.51, 0.61, 0.63].freeze,
        "b" => [0.94, 0.6, 0.34, 1.0, 0.69, 0.98, 0.59, 0.63, 0.56].freeze,
        "c" => [0.31, 0.48, 0.42, 1.0, 0.69, 0.43, 0.53, 0.67, 0.53].freeze,
        "d" => [0.28, 0.49, 0.94, 0.87, 0.63, 1.0, 0.47, 0.58, 0.61].freeze,
        "e" => [0.3, 0.44, 0.37, 1.0, 0.9, 0.89, 0.51, 0.64, 0.47].freeze,
        "f" => [0.44, 1.0, 0.71, 0.49, 0.91, 0.27, 0.26, 0.47, 0.13].freeze,
        "g" => [0.29, 0.43, 0.4, 0.88, 0.62, 0.96, 0.7, 0.95, 1.0].freeze,
        "h" => [0.95, 0.63, 0.33, 1.0, 0.67, 0.95, 0.57, 0.3, 0.6].freeze,
        "i" => [0.53, 0.84, 0.18, 0.42, 1.0, 0.3, 0.18, 0.63, 0.56].freeze,
        "j" => [0.29, 0.9, 0.74, 0.24, 0.75, 1.0, 0.4, 0.9, 0.92].freeze,
        "k" => [0.89, 0.44, 0.33, 1.0, 0.97, 0.54, 0.56, 0.45, 0.53].freeze,
        "l" => [0.57, 1.0, 0.2, 0.29, 0.99, 0.31, 0.2, 0.65, 0.57].freeze,
        "m" => [0.44, 0.49, 0.44, 0.99, 0.81, 1.0, 0.56, 0.23, 0.54].freeze,
        "n" => [0.4, 0.5, 0.37, 0.98, 0.68, 1.0, 0.6, 0.32, 0.63].freeze,
        "o" => [0.32, 0.45, 0.35, 0.95, 0.65, 1.0, 0.52, 0.62, 0.58].freeze,
        "p" => [0.38, 0.46, 0.34, 0.93, 0.67, 0.96, 1.0, 0.74, 0.57].freeze,
        "q" => [0.27, 0.41, 0.38, 0.84, 0.61, 0.92, 0.47, 0.62, 1.0].freeze,
        "r" => [0.4, 0.64, 0.51, 1.0, 0.96, 0.4, 0.65, 0.49, 0.18].freeze,
        "s" => [0.36, 0.5, 0.34, 0.69, 1.0, 0.73, 0.45, 0.71, 0.66].freeze,
        "t" => [0.48, 0.81, 0.38, 0.5, 1.0, 0.38, 0.22, 0.62, 0.5].freeze,
        "u" => [0.37, 0.23, 0.39, 0.92, 0.55, 1.0, 0.5, 0.67, 0.68].freeze,
        "v" => [0.5, 0.24, 0.49, 0.93, 0.97, 1.0, 0.33, 0.89, 0.39].freeze,
        "w" => [0.36, 0.19, 0.33, 0.96, 0.86, 1.0, 0.59, 0.55, 0.64].freeze,
        "x" => [0.33, 0.29, 0.33, 0.54, 1.0, 0.66, 0.47, 0.43, 0.53].freeze,
        "y" => [0.37, 0.21, 0.37, 0.62, 0.8, 0.8, 0.47, 1.0, 0.39].freeze,
        "z" => [0.3, 0.51, 0.45, 0.46, 1.0, 0.59, 0.56, 0.74, 0.45].freeze,
        "{" => [0.28, 0.93, 0.5, 0.53, 0.95, 0.18, 0.3, 1.0, 0.46].freeze,
        "|" => [0.22, 0.92, 0.31, 0.23, 1.0, 0.33, 0.23, 0.99, 0.33].freeze,
        "}" => [0.41, 0.96, 0.38, 0.14, 0.87, 0.69, 0.37, 1.0, 0.41].freeze,
        "~" => [0.33, 0.33, 0.31, 0.87, 1.0, 0.95, 0.32, 0.33, 0.36].freeze,
      }.freeze

      # Find the best character to represent every 3x3 cell, by maximizing the
      # dot product of its representation with the intensities.
      CHARS = (1..0b111111111).map do |n|
        repr = ([0] * 9 + n.digits(2).reverse)[-9..-1]
        vec = repr.map { |v| v == 1 ? 1 : -1 } # Make zeros contribute to the selection too.
        best = INTENSITIES.max_by do |chr, int|
          int.zip(vec).map { |a, b| a * b }.sum
        end.first
        [repr, best]
      end.to_h.merge({ [0] * 9 => " " }).freeze

      def initialize(width, height)
        super(width, height, X_PIXEL_PER_CHAR, Y_PIXEL_PER_CHAR)
      end

      def render(hits)
        char = CHARS[hits.flatten(1).map{ |a| a.empty? ? 0 : 1 }]
        color = hits.flatten(2).sort_by { |t| t.first || 0 }.last&.last # The latest color.
        [char, color]
      end

    end
  end
end
